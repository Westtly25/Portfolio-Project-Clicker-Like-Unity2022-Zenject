//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""Gameplay action map"",
            ""id"": ""b73465bd-b75d-4e44-8f4e-22dcb84c7ffe"",
            ""actions"": [
                {
                    ""name"": ""Touch Clicks"",
                    ""type"": ""Button"",
                    ""id"": ""552554aa-f11b-4c1c-8df2-c08e8c3d5570"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55d13b3f-8b6a-4fce-96ae-09b948c1975f"",
                    ""path"": ""<Touchscreen>/touch*/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Game control scheme"",
                    ""action"": ""Touch Clicks"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Game control scheme"",
            ""bindingGroup"": ""Game control scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay action map
        m_Gameplayactionmap = asset.FindActionMap("Gameplay action map", throwIfNotFound: true);
        m_Gameplayactionmap_TouchClicks = m_Gameplayactionmap.FindAction("Touch Clicks", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay action map
    private readonly InputActionMap m_Gameplayactionmap;
    private List<IGameplayactionmapActions> m_GameplayactionmapActionsCallbackInterfaces = new List<IGameplayactionmapActions>();
    private readonly InputAction m_Gameplayactionmap_TouchClicks;
    public struct GameplayactionmapActions
    {
        private @GameInput m_Wrapper;
        public GameplayactionmapActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchClicks => m_Wrapper.m_Gameplayactionmap_TouchClicks;
        public InputActionMap Get() { return m_Wrapper.m_Gameplayactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayactionmapActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayactionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayactionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayactionmapActionsCallbackInterfaces.Add(instance);
            @TouchClicks.started += instance.OnTouchClicks;
            @TouchClicks.performed += instance.OnTouchClicks;
            @TouchClicks.canceled += instance.OnTouchClicks;
        }

        private void UnregisterCallbacks(IGameplayactionmapActions instance)
        {
            @TouchClicks.started -= instance.OnTouchClicks;
            @TouchClicks.performed -= instance.OnTouchClicks;
            @TouchClicks.canceled -= instance.OnTouchClicks;
        }

        public void RemoveCallbacks(IGameplayactionmapActions instance)
        {
            if (m_Wrapper.m_GameplayactionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayactionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayactionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayactionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayactionmapActions @Gameplayactionmap => new GameplayactionmapActions(this);
    private int m_GamecontrolschemeSchemeIndex = -1;
    public InputControlScheme GamecontrolschemeScheme
    {
        get
        {
            if (m_GamecontrolschemeSchemeIndex == -1) m_GamecontrolschemeSchemeIndex = asset.FindControlSchemeIndex("Game control scheme");
            return asset.controlSchemes[m_GamecontrolschemeSchemeIndex];
        }
    }
    public interface IGameplayactionmapActions
    {
        void OnTouchClicks(InputAction.CallbackContext context);
    }
}
